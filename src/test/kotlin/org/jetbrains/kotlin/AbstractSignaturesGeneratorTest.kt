/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin

import org.jetbrains.kotlin.KythePluginArguments.TEST_SIGNATURES_ARGUMENT
import org.jetbrains.kotin.test.FileComparisonFailure
import java.io.File

/**
 * This test verifies correctness of signatures generated by [org.jetbrains.kotlin.kythe.signatures.KotlinSignaturesProvider]
 *
 * Each test consists of two files: test data (.kt-file) and expected dump. Test runner runs signature generator
 * against test data, builds new dump and compares it with expected one.
 *
 * Dump format is essentially rendered Ir-tree, but for each node two lines are rendered: first is a rendered IrElement,
 * and the second one is a signature for that IrElement.
 *
 */
open class AbstractSignaturesGeneratorTest {
    protected fun doTest(filePath: String) {
        System.setProperty("java.awt.headless", "true")

        val inputFile = File(filePath)
        val expectedOutputFile = inputFile.parentFile.resolve(inputFile.name.replace(".kt", ".txt"))
        val expectedText = expectedOutputFile.readText()

        runKotlinCompilerWithKythePlugin(inputFile)

        val actualOutputFile = File(expectedOutputFile.path + ".new")
        val actualText = actualOutputFile.readText()
        actualOutputFile.deleteOnExit()

        if (expectedText != actualText) {
            throw FileComparisonFailure("Unexpected output" + ": " + expectedOutputFile.name,
                    expectedText, actualText, expectedOutputFile.absolutePath)
        }
    }

    private fun runKotlinCompilerWithKythePlugin(file: File): String {
        val compilerWrapper = InProcessKotlinCompilerWrapper.createWithDefaultPaths()
        return compilerWrapper.executeWithKythePlugin(listOf(file), TEST_SIGNATURES_ARGUMENT to "true").assertZeroExitCode()
    }

    fun runKotlinCompilerWithKythePlugin(files: List<File>): String {
        val compilerWrapper = InProcessKotlinCompilerWrapper.createWithDefaultPaths()
        return compilerWrapper.executeWithKythePlugin(files, TEST_SIGNATURES_ARGUMENT to "true").assertZeroExitCode()
    }
}

